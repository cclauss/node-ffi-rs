/* automatically generated by rust-bindgen 0.66.1 */

#[link(name = "sum")]

extern "C" {
  pub fn sum(a: ::std::os::raw::c_int, b: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn doubleSum(a: f64, b: f64) -> f64;
}
extern "C" {
  pub fn concatenateStrings(
    str1: *const ::std::os::raw::c_char,
    str2: *const ::std::os::raw::c_char,
  ) -> *const ::std::os::raw::c_char;
}
extern "C" {
  pub fn noRet();
}
extern "C" {
  pub fn createArrayi32(
    arr: *const ::std::os::raw::c_int,
    size: ::std::os::raw::c_int,
  ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
  pub fn createArrayDouble(arr: *const f64, size: ::std::os::raw::c_int) -> *mut f64;
}
extern "C" {
  pub fn createArrayString(
    arr: *mut *mut ::std::os::raw::c_char,
    size: ::std::os::raw::c_int,
  ) -> *mut *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Parent {
  pub name: *const ::std::os::raw::c_char,
  pub age: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_Parent() {
  const UNINIT: ::std::mem::MaybeUninit<Parent> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<Parent>(),
    16usize,
    concat!("Size of: ", stringify!(Parent))
  );
  assert_eq!(
    ::std::mem::align_of::<Parent>(),
    8usize,
    concat!("Alignment of ", stringify!(Parent))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(Parent),
      "::",
      stringify!(name)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).age) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(Parent),
      "::",
      stringify!(age)
    )
  );
}
pub type FunctionPointer = ::std::option::Option<unsafe extern "C" fn(a: f64)>;
extern "C" {
  pub fn callFunction(func: FunctionPointer);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Person {
  pub name: *const ::std::os::raw::c_char,
  pub age: ::std::os::raw::c_int,
  pub parent: Parent,
}
#[test]
fn bindgen_test_layout_Person() {
  const UNINIT: ::std::mem::MaybeUninit<Person> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<Person>(),
    32usize,
    concat!("Size of: ", stringify!(Person))
  );
  assert_eq!(
    ::std::mem::align_of::<Person>(),
    8usize,
    concat!("Alignment of ", stringify!(Person))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(Person),
      "::",
      stringify!(name)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).age) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(Person),
      "::",
      stringify!(age)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(Person),
      "::",
      stringify!(parent)
    )
  );
}
extern "C" {
  pub fn getStruct(p: *const Person) -> *const Person;
}
